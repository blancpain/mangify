// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(BASIC)
  disabled     Boolean  @default(false)
  profile      Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, role])
  @@map("users")
}

///? do we need to save nutrition profile in db as well?
model Profile {
  id                String        @id @default(uuid())
  user              User          @relation(fields: [userId], references: [id])
  diet              Diet?
  sex               Sex?
  activity_level    ActivityLevel @default(MODERATE)
  goal              Goal?         @default(MAINTAIN)
  age               Int?
  height            Int?
  weight            Int?
  intolerances      String[]
  favorite_cuisines String[]
  meals_per_day     Int           @default(3)
  favorite_recipes  Recipes[]     @relation("RecipesLikedBy")
  recipes_to_avoid  Recipes[]     @relation("RecipesAvoidedBy")
  meals             Meals[]       @relation("UserMealPlans")
  ingredients       Ingredients[] @relation("UserIngredients")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique

  @@index([diet, sex, activity_level, goal, height, weight])
  @@map("profile")
}

model Recipes {
  id          String    @id @default(uuid())
  external_id String
  likedBy     Profile[] @relation("RecipesLikedBy")
  avoidedBy   Profile[] @relation("RecipesAvoidedBy")

  @@map("recipes")
}

model Meals {
  id                 String @id @default(uuid())
  recipe_external_id String

  user        Profile[]     @relation("UserMealPlans")
  ingredients Ingredients[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("meals")
}

model Ingredients {
  id          String @id @default(uuid())
  external_id String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Meals     Meals     @relation(fields: [mealId], references: [id])
  mealId    String
  user      Profile[] @relation("UserIngredients")

  @@map("ingredients")
}

enum Role {
  BASIC
  ADMIN
}

enum Sex {
  MALE
  FEMALE
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  VERYACTIVE
}

enum Goal {
  LOSEWEIGHT
  MAINTAIN
  GAINWEIGHT
}

enum Diet {
  ANYTHING
  VEGETARIAN
  VEGAN
  KETOGENIC
  PALEO
  PESCETARIAN
}

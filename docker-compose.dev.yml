services:
  # postgres db
  postgres:
    image: postgres
    restart: always
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - ./server/src/db/postgres_data:/var/lib/postgresql/data
    container_name: postgres-mangify-dev

  # redis db
  redis:
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./server/src/db/redis_data:/data
    container_name: redis-mangify-dev

  # server
  server:
    image: mangify-server-dev
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    build:
      context: ./server/
      dockerfile: dev.Dockerfile
    volumes:
      - ./server:/usr/src/server
      - /usr/src/server/node_modules
      - ./shared:/usr/src/shared
    container_name: mangify-server-dev
    environment:
      POSTGRES_HOST: postgres
      CHOKIDAR_USEPOLLING: true

  #client
  client:
    image: mangify-client-dev
    build:
      context: ./client/
      dockerfile: dev.Dockerfile
    volumes:
      - ./client:/usr/src/client
      # for local node_modules not to override the container node_modules we need to persist the volue
      # the other solutions is to run rebuild at start
      - /usr/src/client/node_modules
      - ./shared:/usr/src/shared
    container_name: mangify-client-dev
    environment:
      CHOKIDAR_USEPOLLING: true

  # reverse proxy
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: mangify-reverse-proxy-dev
    depends_on:
      - client
      - server
      - postgres
      - redis
